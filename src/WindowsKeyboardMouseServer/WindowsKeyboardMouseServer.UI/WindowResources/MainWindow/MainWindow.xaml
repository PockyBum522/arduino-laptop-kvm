<Window x:Class="WindowsKeyboardMouseServer.UI.WindowResources.MainWindow.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
        xmlns:mainWindow="clr-namespace:WindowsKeyboardMouseServer.UI.WindowResources.MainWindow"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        d:DataContext="{d:DesignInstance Type=mainWindow:MainWindowViewModel, IsDesignTimeCreatable=True}"
        mc:Ignorable="d"
        Style="{StaticResource StandardWindow}"
        Title="MainWindow" Height="900" Width="900"
        Background="#222222">
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="10" />
            <RowDefinition Height="1*" />
            <RowDefinition Height="10" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="10" />
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="10" />
        </Grid.ColumnDefinitions>

        <Grid.Resources>
            <Style TargetType="{x:Type StackPanel}">
                <Setter Property="Margin" Value="2" />
            </Style>

            <!-- Design time dark backgrounds  -->
            <Style TargetType="{x:Type ScrollViewer}">
                <Style.Triggers>
                    <Trigger Property="componentModel:DesignerProperties.IsInDesignMode" Value="True">
                        <Setter Property="Background" Value="#333333" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type CheckBox}">
                <Style.Triggers>
                    <Trigger Property="componentModel:DesignerProperties.IsInDesignMode" Value="True">
                        <Setter Property="Foreground" Value="#FFFFFF" />
                    </Trigger>
                </Style.Triggers>

                <!-- I have no idea why this has to be done. It should be set in CheckBoxStyles.xaml in Themes folder -->
                <Setter Property="Background" Value="#555555" />
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Style.Triggers>
                    <Trigger Property="componentModel:DesignerProperties.IsInDesignMode" Value="True">
                        <Setter Property="Foreground" Value="#FFFFFF" />
                    </Trigger>
                </Style.Triggers>
                
            </Style>
            
        </Grid.Resources>
        
            <!-- System Settings -->
            <DockPanel Grid.Row="1" Grid.Column="1" >

                <!-- Button logic is in MouseCenteringBehavior  -->
                <Button Content="Trap Mouse and Keyboard" Command="{Binding ButtonLoadedCommand}" Background="#333333" Padding="10">
                    
                    <b:Interaction.Triggers>
                        
                        <b:EventTrigger EventName="Loaded">
                            <b:InvokeCommandAction Command="{ Binding ButtonLoadedCommand }" PassEventArgsToCommand="True" />
                        </b:EventTrigger>
                        
                        <b:EventTrigger EventName="PreviewKeyDown">
                            <b:InvokeCommandAction Command="{ Binding KeyDownCommand }" PassEventArgsToCommand="True" />
                        </b:EventTrigger>
                        
                        <b:EventTrigger EventName="PreviewKeyUp">
                            <b:InvokeCommandAction Command="{ Binding KeyUpCommand }" PassEventArgsToCommand="True" />
                        </b:EventTrigger>
                        
                        <b:EventTrigger EventName="PreviewMouseDown">
                            <b:InvokeCommandAction Command="{ Binding MouseDownCommand }" PassEventArgsToCommand="True" />
                        </b:EventTrigger>
                        
                        <b:EventTrigger EventName="PreviewMouseUp">
                            <b:InvokeCommandAction Command="{ Binding MouseUpCommand }" PassEventArgsToCommand="True" />
                        </b:EventTrigger>
                        
                        <b:EventTrigger EventName="PreviewMouseMove">
                            <b:InvokeCommandAction Command="{ Binding MouseMoveCommand }" PassEventArgsToCommand="True" />
                        </b:EventTrigger>
                        
                    </b:Interaction.Triggers>
                </Button>

            </DockPanel>
    </Grid>
</Window>